/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Parser.jj */
/*@egen*//** * BeehiveZ is a business process model and instance management system. * Copyright (C) 2011   * Institute of Information System and Engineering, School of Software, Tsinghua University, * Beijing, China * * Contact: jintao05@gmail.com  * * This program is a free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation with the version of 2. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. *//*please use UTF-8 * This is a JJTree file that is used to generate query expression parser.* Expression ::= AndExpression {"or" AndExpression}* AndExpression ::= UnaryExpression {"and" UnaryExpression}* UnaryExpression :: = "(" Expression ")" | Activity [Op Activity]* Activity ::= """" (~[""""])+ """""* OP ::= \u922d\ue682>|\u7984|\u922b\u62be\u922b\u7218\u922f\u6b80\u8133*/options{  JAVA_UNICODE_ESCAPE = true;  UNICODE_INPUT = false;  STATIC = false;               KEEP_LINE_COLUMN = false;}PARSER_BEGIN(Parser)package cn.edu.thss.iise.beehivez.server.index.petrinetindex.rltMatrix.queryParser;import java.io.StringReader;/** An Arithmetic Grammar. */public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/  /** Main entry point. */  public static void main(String args[])  {    System.out.println("Reading from standard input...");    Parser t = new Parser(new StringReader("\"activity1\" and \"activity2\" or \"activyty3\" and \"activiyt4\""));    try {      ASTStart n = t.Start();      n.dump("");      System.out.println("Thank you.");    } catch (Exception e) {      System.out.println("Oops.");      System.out.println(e.getMessage());      e.printStackTrace();    }  }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"}TOKEN:{	<OP : <RLT_PARALLEL> | <RLT_DIR_SUCC> | <RLT_INDIR_SUCC> | <RLT_DIR_CASUAL>	    | <RLT_INDIR_CASUAL> | <RLT_CYCLE> | <RLT_MUTEX>	> | <#RLT_PARALLEL : "\u2225">| <#RLT_DIR_SUCC : ">">| <#RLT_INDIR_SUCC : "\u00bb">| <#RLT_DIR_CASUAL : "\u2192">| <#RLT_INDIR_CASUAL : "\u21a0">| <#RLT_CYCLE : "\u229a">| <#RLT_MUTEX : "\u00d7">| <AND : "and" >| <OR : "or" >| <ACTIVITY : "\"" (~["\""])+ "\"" >}/** Main production. */ASTStart Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Start */
  try {
/*@egen*/  Expression() ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}/** An Expression. */void Expression()       : {}{  OrExpression()}/** An Or Expression. */void OrExpression()       : {}{/*@bgen(jjtree) #Or(> 1) */
  {
    ASTOr jjtn001 = new ASTOr(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  (    AndExpression() ( ( "or" ) AndExpression() )*  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/        }/** A And Expression. */void AndExpression()       : {}{/*@bgen(jjtree) #And(> 1) */
  {
    ASTAnd jjtn001 = new ASTAnd(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/  (    UnaryExpression() ( ( "and" ) UnaryExpression() )*  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         }/** A Unary Expression. */void UnaryExpression()       :{  Token t;}{  "(" Expression() ")"  |/*@bgen(jjtree) #Op(> 1) */
                          {
                            ASTOp jjtn001 = new ASTOp(JJTOP);
                            boolean jjtc001 = true;
                            jjtree.openNodeScope(jjtn001);
                          }
                          try {
/*@egen*/ (Activity() [t = <OP>  {    jjtn001.setValue(t.image);  } Activity()])/*@bgen(jjtree)*/
                          } catch (Throwable jjte001) {
                            if (jjtc001) {
                              jjtree.clearNodeScope(jjtn001);
                              jjtc001 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte001 instanceof RuntimeException) {
                              throw (RuntimeException)jjte001;
                            }
                            if (jjte001 instanceof ParseException) {
                              throw (ParseException)jjte001;
                            }
                            throw (Error)jjte001;
                          } finally {
                            if (jjtc001) {
                              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                            }
                          }
/*@egen*/         }/** An Activity. */void Activity() :{/*@bgen(jjtree) Activity */
  ASTActivity jjtn000 = new ASTActivity(JJTACTIVITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/  Token t;}{/*@bgen(jjtree) Activity */
  try {
/*@egen*/  t=<ACTIVITY>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    jjtn000.setValue(t.image);  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}