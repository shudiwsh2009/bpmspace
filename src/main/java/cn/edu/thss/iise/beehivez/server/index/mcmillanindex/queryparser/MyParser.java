/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package cn.edu.thss.iise.beehivez.server.index.mcmillanindex.queryparser;

public class MyParser implements MyParserConstants {

	/** Root production. */
	final public Query Start() throws ParseException {
		Query result;
		Assignments assignments = null;
		Predict predict = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LBRACE:
			assignments = Assignments();
			break;
		default:
			jj_la1[0] = jj_gen;
			;
		}
		predict = Predict();
		jj_consume_token(0);
		result = new Query(assignments, predict);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	/** Assignment production. */
	final public Assignments Assignments() throws ParseException {
		Assignments result = null;
		TaskSet taskset;
		Token temp;
		jj_consume_token(LBRACE);
		temp = jj_consume_token(VARIABLE);
		jj_consume_token(EQUAL);
		taskset = TaskSet();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SEMICOLON:
			result = AssignmentsTail();
			break;
		default:
			jj_la1[1] = jj_gen;
			;
		}
		jj_consume_token(RBRACE);
		if (result == null) {
			result = new Assignments();
		}
		result.addAssignment(temp.toString(), taskset);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public Assignments AssignmentsTail() throws ParseException {
		Assignments result = null;
		TaskSet taskset;
		Token temp;
		jj_consume_token(SEMICOLON);
		temp = jj_consume_token(VARIABLE);
		jj_consume_token(EQUAL);
		taskset = TaskSet();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SEMICOLON:
			result = AssignmentsTail();
			break;
		default:
			jj_la1[2] = jj_gen;
			;
		}
		if (result == null) {
			result = new Assignments();
		}
		result.addAssignment(temp.toString(), taskset);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public Predict PRETSTail() throws ParseException {
		TaskSet ts;
		Token temp;
		Token anyall = null;
		Predict result;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case EXIST:
			jj_consume_token(EXIST);
			result = new Predict(3);
			{
				if (true)
					return result;
			}
			break;
		case SETCOMOP:
			temp = jj_consume_token(SETCOMOP);
			ts = TaskSet();
			result = new Predict(4);
			result.setOp(temp.toString());
			result.taskset2 = ts;
			{
				if (true)
					return result;
			}
			break;
		case TASKCOMPOP:
			temp = jj_consume_token(TASKCOMPOP);
			ts = TaskSet();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ANYALL:
				anyall = jj_consume_token(ANYALL);
				break;
			default:
				jj_la1[3] = jj_gen;
				;
			}
			result = new Predict(5);
			result.setOp(temp.toString());
			if (anyall == null) {
				result.setAnyall("all");
			} else {
				result.setAnyall(anyall.toString());
			}
			result.taskset2 = ts;
			{
				if (true)
					return result;
			}
			break;
		default:
			jj_la1[4] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	/** Predict production. */
	final public Predict Predict() throws ParseException {
		Predict result;
		TaskSet ts1;
		Predict preTail = null;
		Predict pretstail = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case UNLOGOP:
			jj_consume_token(UNLOGOP);
			result = Predict();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case BINLOGOP:
				preTail = PredictTail();
				break;
			default:
				jj_la1[5] = jj_gen;
				;
			}
			result = new Predict(result);
			if (preTail != null) {
				preTail.predict1 = result;
				{
					if (true)
						return preTail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		case LPAREN:
			jj_consume_token(LPAREN);
			result = Predict();
			jj_consume_token(RPAREN);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case BINLOGOP:
				preTail = PredictTail();
				break;
			default:
				jj_la1[6] = jj_gen;
				;
			}
			if (preTail != null) {
				preTail.predict1 = result;
				{
					if (true)
						return preTail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		case TASKCOMPOP:
		case VARIABLE:
		case LBRACKET:
		case 42:
			ts1 = TaskSet();
			pretstail = PRETSTail();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case BINLOGOP:
				preTail = PredictTail();
				break;
			default:
				jj_la1[7] = jj_gen;
				;
			}
			pretstail.taskset1 = ts1;
			if (preTail != null) {
				preTail.predict1 = pretstail;
				{
					if (true)
						return preTail;
				}
			}
			{
				if (true)
					return pretstail;
			}
			break;
		default:
			jj_la1[8] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public Predict PredictTail() throws ParseException {
		Predict result;
		Predict pre;
		Predict preTail = null;
		Token temp;
		temp = jj_consume_token(BINLOGOP);
		pre = Predict();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case BINLOGOP:
			preTail = PredictTail();
			break;
		default:
			jj_la1[9] = jj_gen;
			;
		}
		result = new Predict(1);
		result.setOp(temp.toString());
		result.predict2 = pre;
		if (preTail != null) {
			preTail.predict1 = result;
			{
				if (true)
					return preTail;
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public TaskSet TSTail() throws ParseException {
		TaskSet ts;
		Token temp;
		TaskSet tstail = null;
		TaskSet result;
		temp = jj_consume_token(SETOP);
		ts = TaskSet();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case SETOP:
			tstail = TSTail();
			break;
		default:
			jj_la1[10] = jj_gen;
			;
		}
		result = new TaskSet(2);
		result.setOp(temp.toString());
		result.taskset2 = ts;
		if (tstail != null) {
			tstail.taskset1 = result;
			{
				if (true)
					return tstail;
			}
		}
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	/** TaskSet production. */
	final public TaskSet TaskSet() throws ParseException {
		TaskSet result;
		Token temp;
		TaskSet ts1;
		TaskSet ts2;
		Token anyall = null;
		TaskSet tstail = null;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LBRACKET:
			jj_consume_token(LBRACKET);
			result = TaskSetExp();
			jj_consume_token(RBRACKET);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SETOP:
				tstail = TSTail();
				break;
			default:
				jj_la1[11] = jj_gen;
				;
			}
			if (tstail != null) {
				tstail.taskset1 = result;
				{
					if (true)
						return tstail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		case VARIABLE:
			temp = jj_consume_token(VARIABLE);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SETOP:
				tstail = TSTail();
				break;
			default:
				jj_la1[12] = jj_gen;
				;
			}
			result = new TaskSet(temp.toString());
			if (tstail != null) {
				tstail.taskset1 = result;
				{
					if (true)
						return tstail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		case 42:
			jj_consume_token(42);
			result = TaskSet();
			jj_consume_token(43);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SETOP:
				tstail = TSTail();
				break;
			default:
				jj_la1[13] = jj_gen;
				;
			}
			if (tstail != null) {
				tstail.taskset1 = result;
				{
					if (true)
						return tstail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		case TASKCOMPOP:
			temp = jj_consume_token(TASKCOMPOP);
			ts1 = TaskSet();
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case ANYALL:
				anyall = jj_consume_token(ANYALL);
				break;
			default:
				jj_la1[14] = jj_gen;
				;
			}
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SETOP:
				tstail = TSTail();
				break;
			default:
				jj_la1[15] = jj_gen;
				;
			}
			if (anyall == null) {
				result = new TaskSet(temp.toString(), ts1, "all");
			} else {
				result = new TaskSet(temp.toString(), ts1, anyall.toString());
			}
			if (tstail != null) {
				tstail.taskset1 = result;
				{
					if (true)
						return tstail;
				}
			}
			{
				if (true)
					return result;
			}
			break;
		default:
			jj_la1[16] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		throw new Error("Missing return statement in function");
	}

	final public TaskSet TaskSetExp() throws ParseException {
		TaskSet result = null;
		Token add = null;
		Double sim = 1.0;
		add = jj_consume_token(IDENTIFIER);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LPAREN:
			sim = Similarity();
			break;
		default:
			jj_la1[17] = jj_gen;
			;
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMMA:
			result = TaskSetExpTail();
			break;
		default:
			jj_la1[18] = jj_gen;
			;
		}
		if (result == null) {
			result = new TaskSet();
		}
		result.addTask(add.toString(), sim);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public TaskSet TaskSetExpTail() throws ParseException {
		TaskSet result = null;
		Token add = null;
		Double sim = 1.0;
		jj_consume_token(COMMA);
		add = jj_consume_token(IDENTIFIER);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case LPAREN:
			sim = Similarity();
			break;
		default:
			jj_la1[19] = jj_gen;
			;
		}
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case COMMA:
			result = TaskSetExpTail();
			break;
		default:
			jj_la1[20] = jj_gen;
			;
		}
		if (result == null) {
			result = new TaskSet();
		}
		result.addTask(add.toString(), sim);
		{
			if (true)
				return result;
		}
		throw new Error("Missing return statement in function");
	}

	final public Double Similarity() throws ParseException {
		Token sim;
		jj_consume_token(LPAREN);
		sim = jj_consume_token(FLOATING_POINT_LITERAL);
		jj_consume_token(RPAREN);
		{
			if (true)
				return Double.parseDouble(sim.toString());
		}
		throw new Error("Missing return statement in function");
	}

	/** Generated Token Manager. */
	public MyParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[21];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x0, 0x0, 0x0, 0x100000, 0x80c00, 0x20, 0x20,
				0x20, 0x40000500, 0x20, 0x8000, 0x8000, 0x8000, 0x8000,
				0x100000, 0x8000, 0x40000400, 0x0, 0x0, 0x0, 0x0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x8, 0x80, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x422,
				0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x420, 0x2, 0x100, 0x2,
				0x100, };
	}

	/** Constructor with InputStream. */
	public MyParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public MyParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new MyParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public MyParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new MyParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public MyParser(MyParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(MyParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 21; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[44];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 21; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 44; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

	/** Main entry point. */
	/*
	 * public static void main(String args[]) { MyParser parser; Query q;
	 * System.out.println("Reading from file . . ."); parser = new
	 * Simple1(FileInputStream("C:\\test2.txt"));
	 * 
	 * try { q = parser.Start(); System.out.println("Parsed successfully.");
	 * 
	 * } catch (ParseException e) { System.out.println(e.getMessage());
	 * System.out.println("Encountered errors during parse."); } }
	 */
}
