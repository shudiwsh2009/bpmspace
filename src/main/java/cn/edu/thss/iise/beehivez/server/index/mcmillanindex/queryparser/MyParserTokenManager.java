/* Generated By:JavaCC: Do not edit this line. MyParserTokenManager.java */
package cn.edu.thss.iise.beehivez.server.index.mcmillanindex.queryparser;

/** Token Manager. */
public class MyParserTokenManager implements MyParserConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 26;
				return 75;
			}
			if ((active0 & 0x80000L) != 0L) {
				jjmatchedKind = 26;
				return 18;
			}
			if ((active0 & 0x2800000L) != 0L) {
				jjmatchedKind = 26;
				return 272;
			}
			return -1;
		case 1:
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 1;
				return 74;
			}
			if ((active0 & 0x80000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 1;
				return 17;
			}
			if ((active0 & 0x2800000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 1;
				return 272;
			}
			return -1;
		case 2:
			if ((active0 & 0x3880000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 2;
				return 272;
			}
			return -1;
		case 3:
			if ((active0 & 0x800000L) != 0L)
				return 272;
			if ((active0 & 0x3080000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 3;
				return 272;
			}
			return -1;
		case 4:
			if ((active0 & 0x2080000L) != 0L)
				return 272;
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 4;
				return 272;
			}
			return -1;
		case 5:
			if ((active0 & 0x1000000L) != 0L) {
				jjmatchedKind = 26;
				jjmatchedPos = 5;
				return 272;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 40:
			return jjStopAtPos(0, 33);
		case 41:
			return jjStopAtPos(0, 34);
		case 44:
			return jjStopAtPos(0, 40);
		case 59:
			return jjStopAtPos(0, 39);
		case 60:
			return jjStopAtPos(0, 42);
		case 61:
			return jjStopAtPos(0, 41);
		case 62:
			return jjStopAtPos(0, 43);
		case 91:
			return jjStopAtPos(0, 37);
		case 93:
			return jjStopAtPos(0, 38);
		case 101:
			return jjMoveStringLiteralDfa1_0(0x80000L);
		case 108:
			return jjMoveStringLiteralDfa1_0(0x800000L);
		case 112:
			return jjMoveStringLiteralDfa1_0(0x1000000L);
		case 119:
			return jjMoveStringLiteralDfa1_0(0x2000000L);
		case 123:
			return jjStopAtPos(0, 35);
		case 125:
			return jjStopAtPos(0, 36);
		default:
			return jjMoveNfa_0(1, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
		case 114:
			return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 99:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
		case 116:
			if ((active0 & 0x800000L) != 0L)
				return jjStartNfaWithStates_0(3, 23, 272);
			break;
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 101:
			if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(4, 25, 272);
			return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
		case 116:
			if ((active0 & 0x80000L) != 0L)
				return jjStartNfaWithStates_0(4, 19, 272);
			break;
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 115:
			return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 115:
			if ((active0 & 0x1000000L) != 0L)
				return jjStartNfaWithStates_0(6, 24, 272);
			break;
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 272;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 272:
						if ((0x3ff001000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 1:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(0, 6);
						else if (curChar == 46)
							jjCheckNAdd(50);
						else if (curChar == 36) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 33) {
							if (kind > 8)
								kind = 8;
						} else if (curChar == 38)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 18:
						if ((0x3ff001000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 75:
						if ((0x3ff001000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 74:
						if ((0x3ff001000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 17:
						if ((0x3ff001000000000L & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 0:
						if (curChar == 38 && kind > 5)
							kind = 5;
						break;
					case 4:
						if (curChar == 33)
							kind = 8;
						break;
					case 41:
						if (curChar != 36)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(42, 43);
						break;
					case 42:
						if ((0x3ff001000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(42, 43);
						break;
					case 43:
						if (curChar == 32)
							jjstateSet[jjnewStateCnt++] = 44;
						break;
					case 44:
						if (curChar != 36)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(43, 45);
						break;
					case 45:
						if ((0x3ff001000000000L & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(43, 45);
						break;
					case 47:
						if (curChar != 36)
							break;
						if (kind > 30)
							kind = 30;
						jjCheckNAdd(48);
						break;
					case 48:
						if ((0x3ff001000000000L & l) == 0L)
							break;
						if (kind > 30)
							kind = 30;
						jjCheckNAdd(48);
						break;
					case 49:
						if (curChar == 46)
							jjCheckNAdd(50);
						break;
					case 50:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddStates(7, 9);
						break;
					case 52:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(53);
						break;
					case 53:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddTwoStates(53, 54);
						break;
					case 55:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(0, 6);
						break;
					case 56:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(56, 57);
						break;
					case 57:
						if (curChar != 46)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddStates(10, 12);
						break;
					case 58:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddStates(10, 12);
						break;
					case 60:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(61);
						break;
					case 61:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddTwoStates(61, 54);
						break;
					case 62:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(62, 63);
						break;
					case 64:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(65);
						break;
					case 65:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 31)
							kind = 31;
						jjCheckNAddTwoStates(65, 54);
						break;
					case 66:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddStates(13, 15);
						break;
					case 68:
						if ((0x280000000000L & l) != 0L)
							jjCheckNAdd(69);
						break;
					case 69:
						if ((0x3ff000000000000L & l) != 0L)
							jjCheckNAddTwoStates(69, 54);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 272:
					case 42:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(42, 43);
						break;
					case 1:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						} else if (curChar == 64)
							jjstateSet[jjnewStateCnt++] = 47;
						else if (curChar == 124)
							jjstateSet[jjnewStateCnt++] = 2;
						if (curChar == 97)
							jjAddStates(16, 25);
						else if (curChar == 105)
							jjAddStates(26, 29);
						else if (curChar == 115)
							jjAddStates(30, 31);
						else if (curChar == 112)
							jjAddStates(32, 40);
						else if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 39;
						else if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 30;
						else if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 25;
						else if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 18;
						else if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 18:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						}
						if (curChar == 120)
							jjstateSet[jjnewStateCnt++] = 17;
						break;
					case 75:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						}
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 151;
						else if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 74;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 140;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 131;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 120;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 111;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 101;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 93;
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 74:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						}
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 73;
						break;
					case 17:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 26)
								kind = 26;
							jjCheckNAddTwoStates(42, 43);
						}
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 16;
						break;
					case 2:
						if (curChar == 124 && kind > 5)
							kind = 5;
						break;
					case 3:
						if (curChar == 124)
							jjstateSet[jjnewStateCnt++] = 2;
						break;
					case 5:
						if (curChar == 114 && kind > 10)
							kind = 10;
						break;
					case 6:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 5;
						break;
					case 7:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 6;
						break;
					case 8:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 7;
						break;
					case 9:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 8;
						break;
					case 10:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 11:
						if (curChar == 101 && kind > 10)
							kind = 10;
						break;
					case 12:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 11;
						break;
					case 13:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 12;
						break;
					case 14:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 13;
						break;
					case 15:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 14;
						break;
					case 16:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 15;
						break;
					case 19:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 18;
						break;
					case 20:
						if (curChar == 112 && kind > 11)
							kind = 11;
						break;
					case 21:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 20;
						break;
					case 22:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 21;
						break;
					case 23:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 22;
						break;
					case 24:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 23;
						break;
					case 25:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 24;
						break;
					case 26:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 25;
						break;
					case 27:
						if (curChar == 110 && kind > 15)
							kind = 15;
						break;
					case 28:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 27;
						break;
					case 29:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 28;
						break;
					case 30:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 29;
						break;
					case 31:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 30;
						break;
					case 32:
						if (curChar == 116 && kind > 15)
							kind = 15;
						break;
					case 33:
						if (curChar == 110)
							jjCheckNAdd(32);
						break;
					case 34:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 33;
						break;
					case 35:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 34;
						break;
					case 36:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 37:
						if (curChar == 102)
							jjstateSet[jjnewStateCnt++] = 36;
						break;
					case 38:
						if (curChar == 102)
							jjstateSet[jjnewStateCnt++] = 37;
						break;
					case 39:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 38;
						break;
					case 40:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 39;
						break;
					case 41:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(42, 43);
						break;
					case 44:
					case 45:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 26)
							kind = 26;
						jjCheckNAddTwoStates(43, 45);
						break;
					case 46:
						if (curChar == 64)
							jjstateSet[jjnewStateCnt++] = 47;
						break;
					case 47:
					case 48:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 30)
							kind = 30;
						jjCheckNAdd(48);
						break;
					case 51:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(41, 42);
						break;
					case 54:
						if ((0x5000000050L & l) != 0L && kind > 31)
							kind = 31;
						break;
					case 59:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(43, 44);
						break;
					case 63:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(45, 46);
						break;
					case 67:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(47, 48);
						break;
					case 70:
						if (curChar == 112)
							jjAddStates(32, 40);
						break;
					case 71:
						if (curChar == 102 && kind > 10)
							kind = 10;
						break;
					case 72:
					case 154:
					case 166:
					case 171:
						if (curChar == 111)
							jjCheckNAdd(71);
						break;
					case 73:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 72;
						break;
					case 76:
						if (curChar == 121 && kind > 10)
							kind = 10;
						break;
					case 77:
					case 95:
					case 113:
					case 133:
					case 192:
					case 210:
					case 228:
					case 248:
						if (curChar == 110)
							jjCheckNAdd(76);
						break;
					case 78:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 77;
						break;
					case 79:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 78;
						break;
					case 80:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 79;
						break;
					case 81:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 80;
						break;
					case 82:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 81;
						break;
					case 83:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 82;
						break;
					case 84:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 83;
						break;
					case 85:
					case 103:
					case 122:
					case 142:
					case 200:
					case 218:
					case 237:
					case 257:
						if (curChar == 114)
							jjCheckNAdd(76);
						break;
					case 86:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 85;
						break;
					case 87:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 86;
						break;
					case 88:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 87;
						break;
					case 89:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 88;
						break;
					case 90:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 89;
						break;
					case 91:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 90;
						break;
					case 92:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 91;
						break;
					case 93:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 92;
						break;
					case 94:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 93;
						break;
					case 96:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 95;
						break;
					case 97:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 96;
						break;
					case 98:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 97;
						break;
					case 99:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 98;
						break;
					case 100:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 99;
						break;
					case 101:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 100;
						break;
					case 102:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 101;
						break;
					case 104:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 103;
						break;
					case 105:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 104;
						break;
					case 106:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 105;
						break;
					case 107:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 106;
						break;
					case 108:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 107;
						break;
					case 109:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 108;
						break;
					case 110:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 109;
						break;
					case 111:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 110;
						break;
					case 112:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 111;
						break;
					case 114:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 113;
						break;
					case 115:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 114;
						break;
					case 116:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 115;
						break;
					case 117:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 116;
						break;
					case 118:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 117;
						break;
					case 119:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 118;
						break;
					case 120:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 119;
						break;
					case 121:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 120;
						break;
					case 123:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 122;
						break;
					case 124:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 123;
						break;
					case 125:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 124;
						break;
					case 126:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 125;
						break;
					case 127:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 126;
						break;
					case 128:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 127;
						break;
					case 129:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 128;
						break;
					case 130:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 129;
						break;
					case 131:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 130;
						break;
					case 132:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 131;
						break;
					case 134:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 133;
						break;
					case 135:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 134;
						break;
					case 136:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 135;
						break;
					case 137:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 136;
						break;
					case 138:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 137;
						break;
					case 139:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 138;
						break;
					case 140:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 139;
						break;
					case 141:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 140;
						break;
					case 143:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 142;
						break;
					case 144:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 143;
						break;
					case 145:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 144;
						break;
					case 146:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 145;
						break;
					case 147:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 146;
						break;
					case 148:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 147;
						break;
					case 149:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 148;
						break;
					case 150:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 149;
						break;
					case 151:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 150;
						break;
					case 152:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 151;
						break;
					case 153:
						if (curChar == 115)
							jjAddStates(30, 31);
						break;
					case 155:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 154;
						break;
					case 156:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 155;
						break;
					case 157:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 156;
						break;
					case 158:
						if (curChar == 102 && kind > 11)
							kind = 11;
						break;
					case 159:
						if (curChar == 111)
							jjstateSet[jjnewStateCnt++] = 158;
						break;
					case 160:
						if (curChar == 116)
							jjstateSet[jjnewStateCnt++] = 159;
						break;
					case 161:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 160;
						break;
					case 162:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 161;
						break;
					case 163:
						if (curChar == 98)
							jjstateSet[jjnewStateCnt++] = 162;
						break;
					case 164:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 163;
						break;
					case 165:
						if (curChar == 105)
							jjAddStates(26, 29);
						break;
					case 167:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 166;
						break;
					case 168:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 167;
						break;
					case 169:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 168;
						break;
					case 170:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 169;
						break;
					case 172:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 171;
						break;
					case 173:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 172;
						break;
					case 174:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 173;
						break;
					case 175:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 174;
						break;
					case 176:
						if (curChar == 108 && kind > 11)
							kind = 11;
						break;
					case 177:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 176;
						break;
					case 178:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 177;
						break;
					case 179:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 178;
						break;
					case 180:
						if (curChar == 116)
							jjstateSet[jjnewStateCnt++] = 179;
						break;
					case 181:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 180;
						break;
					case 182:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 181;
						break;
					case 183:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 182;
						break;
					case 184:
						if (curChar == 99)
							jjCheckNAdd(32);
						break;
					case 185:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 184;
						break;
					case 186:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 185;
						break;
					case 187:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 186;
						break;
					case 188:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 187;
						break;
					case 189:
						if (curChar == 116)
							jjstateSet[jjnewStateCnt++] = 188;
						break;
					case 190:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 189;
						break;
					case 191:
						if (curChar == 97)
							jjAddStates(16, 25);
						break;
					case 193:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 192;
						break;
					case 194:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 193;
						break;
					case 195:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 194;
						break;
					case 196:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 195;
						break;
					case 197:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 196;
						break;
					case 198:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 197;
						break;
					case 199:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 198;
						break;
					case 201:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 200;
						break;
					case 202:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 201;
						break;
					case 203:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 202;
						break;
					case 204:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 203;
						break;
					case 205:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 204;
						break;
					case 206:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 205;
						break;
					case 207:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 206;
						break;
					case 208:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 207;
						break;
					case 209:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 208;
						break;
					case 211:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 210;
						break;
					case 212:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 211;
						break;
					case 213:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 212;
						break;
					case 214:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 213;
						break;
					case 215:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 214;
						break;
					case 216:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 215;
						break;
					case 217:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 216;
						break;
					case 219:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 218;
						break;
					case 220:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 219;
						break;
					case 221:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 220;
						break;
					case 222:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 221;
						break;
					case 223:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 222;
						break;
					case 224:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 223;
						break;
					case 225:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 224;
						break;
					case 226:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 225;
						break;
					case 227:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 226;
						break;
					case 229:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 228;
						break;
					case 230:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 229;
						break;
					case 231:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 230;
						break;
					case 232:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 231;
						break;
					case 233:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 232;
						break;
					case 234:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 233;
						break;
					case 235:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 234;
						break;
					case 236:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 235;
						break;
					case 238:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 237;
						break;
					case 239:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 238;
						break;
					case 240:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 239;
						break;
					case 241:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 240;
						break;
					case 242:
						if (curChar == 99)
							jjstateSet[jjnewStateCnt++] = 241;
						break;
					case 243:
						if (curChar == 117)
							jjstateSet[jjnewStateCnt++] = 242;
						break;
					case 244:
						if (curChar == 115)
							jjstateSet[jjnewStateCnt++] = 243;
						break;
					case 245:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 244;
						break;
					case 246:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 245;
						break;
					case 247:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 246;
						break;
					case 249:
						if (curChar == 97)
							jjstateSet[jjnewStateCnt++] = 248;
						break;
					case 250:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 249;
						break;
					case 251:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 250;
						break;
					case 252:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 251;
						break;
					case 253:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 252;
						break;
					case 254:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 253;
						break;
					case 255:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 254;
						break;
					case 256:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 255;
						break;
					case 258:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 257;
						break;
					case 259:
						if (curChar == 118)
							jjstateSet[jjnewStateCnt++] = 258;
						break;
					case 260:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 259;
						break;
					case 261:
						if (curChar == 100)
							jjstateSet[jjnewStateCnt++] = 260;
						break;
					case 262:
						if (curChar == 101)
							jjstateSet[jjnewStateCnt++] = 261;
						break;
					case 263:
						if (curChar == 114)
							jjstateSet[jjnewStateCnt++] = 262;
						break;
					case 264:
						if (curChar == 112)
							jjstateSet[jjnewStateCnt++] = 263;
						break;
					case 265:
						if (curChar == 105)
							jjstateSet[jjnewStateCnt++] = 264;
						break;
					case 266:
						if (curChar == 119)
							jjstateSet[jjnewStateCnt++] = 265;
						break;
					case 267:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 266;
						break;
					case 268:
						if (curChar == 121 && kind > 20)
							kind = 20;
						break;
					case 269:
						if (curChar == 110)
							jjstateSet[jjnewStateCnt++] = 268;
						break;
					case 270:
						if (curChar == 108 && kind > 20)
							kind = 20;
						break;
					case 271:
						if (curChar == 108)
							jjstateSet[jjnewStateCnt++] = 270;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 272 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 56, 57, 62, 63, 66, 67, 54, 50, 51, 54,
			58, 59, 54, 66, 67, 54, 199, 209, 217, 227, 236, 247, 256, 267,
			269, 271, 170, 175, 183, 190, 157, 164, 75, 84, 94, 102, 112, 121,
			132, 141, 152, 52, 53, 60, 61, 64, 65, 68, 69, };

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, "\145\170\151\163\164", null, null, null,
			"\154\151\163\164", "\160\162\157\143\145\163\163",
			"\167\150\145\162\145", null, null, null, null, null, null, null,
			"\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\75",
			"\74", "\76", };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0xffec7988d21L, };
	static final long[] jjtoSkip = { 0x1eL, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[272];
	private final int[] jjstateSet = new int[544];
	protected char curChar;

	/** Constructor. */
	public MyParserTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error(
					"ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public MyParserTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 272; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : "
					+ lexState + ". State unchanged.",
					TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind);
		t.kind = jjmatchedKind;
		t.image = curTokenImage;

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line,
					error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
