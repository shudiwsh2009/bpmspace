/* Generated By:JavaCC: Do not edit this line. QueryParser.java */
package com.chinamobile.bpmspace.core.repository.index.query.queryparser;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.HashSet;
import java.util.Iterator;
import java.util.TreeSet;

import org.apache.lucene.index.Term;
import org.apache.lucene.search.BooleanClause;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.Query;
import org.apache.lucene.search.TermQuery;

import com.chinamobile.bpmspace.core.repository.index.labelindex.LabelIndex;
import com.chinamobile.bpmspace.core.repository.index.labelindex.SimilarLabelQueryResult;
import com.chinamobile.bpmspace.core.repository.index.petrinetindex.taskindex.TransitionRelationDocument;

/**
 * the most important function is parse given a query string, we can obtain the
 * query expression through this function
 * 
 * <Expression> ::= <AndExpression> (<Or> <AndExpression>)* <AndExpression> ::=
 * (<RelationExpression> | <ExistExpression> | "("<Expression>")") (<And>
 * (<NotExpression> | <RelationExpression> | <ExistExpression> |
 * "("<Expression>")"))* <NotExpression> ::= <Not> (<RelationExpression> |
 * <ExistExpression> | "("<Expression>")") <ExistExpression> ::=
 * <Exist>(<Activity> | "("(<Activity>)+")") <RelationExpression> ::= <Activity>
 * <Relation> <Activity> <Exist> ::= "exist" <Activity> ::= "\"" (~["\""])+ "\""
 * <WhiteSpace> ::= " " | "\t" | "\n" | "\r" | "��" | "" <Relation> ::=
 * (<ParallelWith> | <Exclude> | <Precede>) <ParallelWith> ::= "parallel with" |
 * "==" <Exclude> ::= "exclude" | "##" <Precede> ::= "precede" | "->" <And> ::=
 * "and" | "&&" <Or> ::= "or" | "||" <Not> ::= "not" | "!"
 * 
 */
public class QueryParser implements QueryParserConstants {
	private LabelIndex labelIndex = null;

	private float similarity = 1.0f;

	public void setSemanticAide(LabelIndex index, float sim) {
		labelIndex = index;
		similarity = sim;
	}

	public static void main(String args[]) {
		// String query =
		// "\"a\"||\"b\" && \"c\"##\"d\" && !(!(exist \"e\" && \"e\"->\"f\"));";
		String query = "(\u005c"a\u005c"==\u005c"b\u005c" or \u005c"a\u005c"->\u005c"b\u005c") and \u005c"a\u005c"##\u005c"b\u005c" and \u005c"c\u005c"->\u005c"d\u005c" or \u005c"c\u005c"##\u005c"b\u005c";";
		System.out.println("query: " + query);
		// QueryParser parser = new QueryParser(new
		// ByteArrayInputStream(query.getBytes()));
		StringReader sr = new StringReader(query);
		BufferedReader br = new BufferedReader(sr);
		QueryParser parser = new QueryParser(br);
		try {
			Query q = parser.parse();
			System.out.println(q.toString());
			br.close();
			sr.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * the query string must be ended with ";"
	 */
	final public Query parse() throws ParseException {
		Query ret;
		BooleanQuery.setMaxClauseCount(Integer.MAX_VALUE);
		ret = Expression();
		jj_consume_token(10);
		{
			if (true)
				return ret;
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <Expression> ::= <AndExpression> (<Or> <AndExpression>)*
	 */
	final public Query Expression() throws ParseException {
		Query subQuery;
		HashSet<Query> qs = new HashSet<Query>();
		subQuery = AndExpression();
		qs.add(subQuery);
		label_1: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case OR:
				;
				break;
			default:
				jj_la1[0] = jj_gen;
				break label_1;
			}
			jj_consume_token(OR);
			subQuery = AndExpression();
			qs.add(subQuery);
		}
		if (qs.size() > 1) {
			BooleanQuery bq = new BooleanQuery();
			Iterator<Query> it = qs.iterator();
			while (it.hasNext()) {
				subQuery = it.next();
				bq.add(subQuery, BooleanClause.Occur.SHOULD);
			}
			{
				if (true)
					return bq;
			}
		} else {
			{
				if (true)
					return subQuery;
			}
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <AndExpression> ::= (<RelationExpression> | <ExistExpression> |
	 * "("<Expression>")") (<And> (<NotExpression> | (<RelationExpression> |
	 * <ExistExpression> | "("<Expression>")")))*
	 */
	final public Query AndExpression() throws ParseException {
		Query subQuery;
		HashSet<Query> qs = new HashSet<Query>();
		BooleanQuery bq = new BooleanQuery();
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 13:
			subQuery = RelationExpression();
			break;
		case EXIST:
			subQuery = ExistExpression();
			break;
		case 11:
			jj_consume_token(11);
			subQuery = Expression();
			jj_consume_token(12);
			break;
		default:
			jj_la1[1] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		qs.add(subQuery);
		bq.add(subQuery, BooleanClause.Occur.MUST);
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case AND:
				;
				break;
			default:
				jj_la1[2] = jj_gen;
				break label_2;
			}
			jj_consume_token(AND);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case NOT:
				subQuery = NotExpression();
				if (qs.add(subQuery)) {
					bq.add(subQuery, BooleanClause.Occur.MUST_NOT);
				}
				break;
			case 13:
				subQuery = RelationExpression();
				if (qs.add(subQuery)) {
					bq.add(subQuery, BooleanClause.Occur.MUST);
				}
				break;
			case EXIST:
				subQuery = ExistExpression();
				if (qs.add(subQuery)) {
					bq.add(subQuery, BooleanClause.Occur.MUST);
				}
				break;
			case 11:
				jj_consume_token(11);
				subQuery = Expression();
				if (qs.add(subQuery)) {
					bq.add(subQuery, BooleanClause.Occur.MUST);
				}
				jj_consume_token(12);
				break;
			default:
				jj_la1[3] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
		}
		if (qs.size() > 1) {
			{
				if (true)
					return bq;
			}
		} else {
			{
				if (true)
					return subQuery;
			}
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <NotExpression> ::= <Not> (<RelationExpression> | <ExistExpression> |
	 * "("<Expression>")")
	 */
	final public Query NotExpression() throws ParseException {
		Query subQuery;
		jj_consume_token(NOT);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 13:
			subQuery = RelationExpression();
			break;
		case EXIST:
			subQuery = ExistExpression();
			break;
		case 11:
			jj_consume_token(11);
			subQuery = Expression();
			jj_consume_token(12);
			break;
		default:
			jj_la1[4] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return subQuery;
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <ExistExpression> ::= <Exist>(<Activity>|"("(<Activity>)+")")
	 */
	final public Query ExistExpression() throws ParseException {
		Term term;
		TermQuery tq = null;
		String t;
		HashSet<String> ts = new HashSet<String>();
		BooleanQuery subbq;
		jj_consume_token(EXIST);
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case 13:
			t = Activity();
			ts.add(t);
			break;
		case 11:
			jj_consume_token(11);
			label_3: while (true) {
				t = Activity();
				ts.add(t);
				switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
				case 13:
					;
					break;
				default:
					jj_la1[5] = jj_gen;
					break label_3;
				}
			}
			jj_consume_token(12);
			break;
		default:
			jj_la1[6] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		if (labelIndex != null) {
			// semantic expansion
			if (ts.size() == 1) {
				BooleanQuery bq = new BooleanQuery();
				Iterator<SimilarLabelQueryResult> itTask = labelIndex
						.getSimilarLabels(t, similarity).iterator();
				tq = null;
				while (itTask.hasNext()) {
					t = itTask.next().getLabel();
					term = new Term(TransitionRelationDocument.fieldTask, t);
					tq = new TermQuery(term);
					bq.add(tq, BooleanClause.Occur.SHOULD);
				}
				if (bq.getClauses().length > 1) {
					{
						if (true)
							return bq;
					}
				} else {
					if (tq != null) {
						{
							if (true)
								return tq;
						}
					} else {
						term = new Term(TransitionRelationDocument.fieldTask, t);
						tq = new TermQuery(term);
						{
							if (true)
								return tq;
						}
					}
				}
			} else {
				BooleanQuery bq = new BooleanQuery();
				Iterator<String> it = ts.iterator();
				while (it.hasNext()) {
					t = it.next();
					subbq = new BooleanQuery();
					Iterator<SimilarLabelQueryResult> itTask = labelIndex
							.getSimilarLabels(t, similarity).iterator();
					tq = null;
					while (itTask.hasNext()) {
						t = itTask.next().getLabel();
						term = new Term(TransitionRelationDocument.fieldTask, t);
						tq = new TermQuery(term);
						subbq.add(tq, BooleanClause.Occur.SHOULD);
					}
					if (subbq.getClauses().length > 1) {
						bq.add(subbq, BooleanClause.Occur.MUST);
					} else {
						if (tq != null) {
							bq.add(tq, BooleanClause.Occur.MUST);
						} else {
							term = new Term(
									TransitionRelationDocument.fieldTask, t);
							tq = new TermQuery(term);
							bq.add(tq, BooleanClause.Occur.MUST);
						}
					}
				}
				{
					if (true)
						return bq;
				}
			}
		} else {
			// no semantic expansion
			if (ts.size() == 1) {
				term = new Term(TransitionRelationDocument.fieldTask, t);
				tq = new TermQuery(term);
				{
					if (true)
						return tq;
				}
			} else {
				BooleanQuery bq = new BooleanQuery();
				Iterator<String> it = ts.iterator();
				while (it.hasNext()) {
					t = it.next();
					term = new Term(TransitionRelationDocument.fieldTask, t);
					tq = new TermQuery(term);
					bq.add(tq, BooleanClause.Occur.MUST);
				}
				{
					if (true)
						return bq;
				}
			}
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <RelationExpression> ::= <Activity> <Relation> <Activity>
	 */
	final public Query RelationExpression() throws ParseException {
		String first, second;
		int relation;
		TermQuery tq = null;
		first = Activity();
		relation = Relation();
		second = Activity();
		if (labelIndex != null) {
			// semantic expansion
			BooleanQuery bq = new BooleanQuery();
			TreeSet<SimilarLabelQueryResult> pres = labelIndex
					.getSimilarLabels(first, similarity);
			TreeSet<SimilarLabelQueryResult> sucs = labelIndex
					.getSimilarLabels(second, similarity);
			Iterator<SimilarLabelQueryResult> itPre = pres.iterator();
			tq = null;
			while (itPre.hasNext()) {
				String pre = itPre.next().getLabel();
				Iterator<SimilarLabelQueryResult> itSuc = sucs.iterator();
				while (itSuc.hasNext()) {
					String suc = itSuc.next().getLabel();
					Term term = new Term(
							TransitionRelationDocument.RELATIONFIELDS[relation],
							pre
									+ TransitionRelationDocument.RELATIONCONNECTORS[relation]
									+ suc);
					tq = new TermQuery(term);
					bq.add(tq, BooleanClause.Occur.SHOULD);
				}
			}
			if (bq.getClauses().length > 1) {
				{
					if (true)
						return bq;
				}
			} else {
				if (tq != null) {
					{
						if (true)
							return tq;
					}
				} else {
					Term term = new Term(
							TransitionRelationDocument.RELATIONFIELDS[relation],
							first
									+ TransitionRelationDocument.RELATIONCONNECTORS[relation]
									+ second);
					tq = new TermQuery(term);
					{
						if (true)
							return tq;
					}
				}
			}
		} else {
			// no semantic expansion
			Term term = new Term(
					TransitionRelationDocument.RELATIONFIELDS[relation],
					first
							+ TransitionRelationDocument.RELATIONCONNECTORS[relation]
							+ second);
			tq = new TermQuery(term);
			{
				if (true)
					return tq;
			}
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * ACTIVITY : "\"" (~[ "\"" ])+ "\""
	 */
	final public String Activity() throws ParseException {
		String label;
		Token t;
		int len;
		t = jj_consume_token(13);
		len = t.image.length();
		label = t.image.substring(1, len - 1);
		{
			if (true)
				return label.trim();
		}
		throw new Error("Missing return statement in function");
	}

	/**
	 * <Relation> ::= (<ParallelWith> | <Exclude> | <Precede>)
	 */
	final public int Relation() throws ParseException {
		int ret;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case PARALLELWITH:
			jj_consume_token(PARALLELWITH);
			ret = TransitionRelationDocument.PARALLELWITH;
			break;
		case EXCLUDE:
			jj_consume_token(EXCLUDE);
			ret = TransitionRelationDocument.EXCLUDE;
			break;
		case PRECEDE:
			jj_consume_token(PRECEDE);
			ret = TransitionRelationDocument.PRECEDE;
			break;
		default:
			jj_la1[7] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		{
			if (true)
				return ret;
		}
		throw new Error("Missing return statement in function");
	}

	/** Generated Token Manager. */
	public QueryParserTokenManager token_source;
	JavaCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[8];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x80, 0x2804, 0x40, 0x2904, 0x2804, 0x2000,
				0x2800, 0x38, };
	}

	/** Constructor with InputStream. */
	public QueryParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public QueryParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new JavaCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new QueryParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public QueryParser(java.io.Reader stream) {
		jj_input_stream = new JavaCharStream(stream, 1, 1);
		token_source = new QueryParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public QueryParser(QueryParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(QueryParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 8; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[14];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 8; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 14; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

}
